// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdatingUser updating user
//
// swagger:model UpdatingUser
type UpdatingUser struct {

	// User country code
	// Example: UK
	// Max Length: 2
	// Min Length: 2
	CountryCode *string `json:"country_code,omitempty"`

	// User email
	// Example: johnsmith@gmail.com
	// Max Length: 256
	// Pattern: (?:[a-z0-9!#$%&'*+\=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+\=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])
	Email *string `json:"email,omitempty"`

	// User first name
	// Example: Egor
	// Max Length: 256
	// Min Length: 1
	FirstName *string `json:"first_name,omitempty"`

	// User identifier which was generated by service
	// Required: true
	// Format: uuid
	ID strfmt.UUID `json:"id"`

	// User last name
	// Example: Shestakov
	// Max Length: 256
	// Min Length: 1
	LastName *string `json:"last_name,omitempty"`

	// User nickname
	// Example: muzzzko
	// Max Length: 32
	// Min Length: 2
	Nickname *string `json:"nickname,omitempty"`

	// User password. It must contains capital, small letters and digit
	// Example: gD1wScAs
	// Max Length: 256
	// Min Length: 8
	Password *string `json:"password,omitempty"`
}

// Validate validates this updating user
func (m *UpdatingUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNickname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdatingUser) validateCountryCode(formats strfmt.Registry) error {
	if swag.IsZero(m.CountryCode) { // not required
		return nil
	}

	if err := validate.MinLength("country_code", "body", *m.CountryCode, 2); err != nil {
		return err
	}

	if err := validate.MaxLength("country_code", "body", *m.CountryCode, 2); err != nil {
		return err
	}

	return nil
}

func (m *UpdatingUser) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.MaxLength("email", "body", *m.Email, 256); err != nil {
		return err
	}

	if err := validate.Pattern("email", "body", *m.Email, `(?:[a-z0-9!#$%&'*+\=?^_`+"`"+`{|}~-]+(?:\.[a-z0-9!#$%&'*+\=?^_`+"`"+`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])`); err != nil {
		return err
	}

	return nil
}

func (m *UpdatingUser) validateFirstName(formats strfmt.Registry) error {
	if swag.IsZero(m.FirstName) { // not required
		return nil
	}

	if err := validate.MinLength("first_name", "body", *m.FirstName, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("first_name", "body", *m.FirstName, 256); err != nil {
		return err
	}

	return nil
}

func (m *UpdatingUser) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", strfmt.UUID(m.ID)); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdatingUser) validateLastName(formats strfmt.Registry) error {
	if swag.IsZero(m.LastName) { // not required
		return nil
	}

	if err := validate.MinLength("last_name", "body", *m.LastName, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("last_name", "body", *m.LastName, 256); err != nil {
		return err
	}

	return nil
}

func (m *UpdatingUser) validateNickname(formats strfmt.Registry) error {
	if swag.IsZero(m.Nickname) { // not required
		return nil
	}

	if err := validate.MinLength("nickname", "body", *m.Nickname, 2); err != nil {
		return err
	}

	if err := validate.MaxLength("nickname", "body", *m.Nickname, 32); err != nil {
		return err
	}

	return nil
}

func (m *UpdatingUser) validatePassword(formats strfmt.Registry) error {
	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if err := validate.MinLength("password", "body", *m.Password, 8); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", *m.Password, 256); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this updating user based on context it is used
func (m *UpdatingUser) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdatingUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdatingUser) UnmarshalBinary(b []byte) error {
	var res UpdatingUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
