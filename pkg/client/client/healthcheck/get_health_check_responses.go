// Code generated by go-swagger; DO NOT EDIT.

package healthcheck

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github/user-manager/pkg/client/models"
)

// GetHealthCheckReader is a Reader for the GetHealthCheck structure.
type GetHealthCheckReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetHealthCheckReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetHealthCheckOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewGetHealthCheckInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetHealthCheckOK creates a GetHealthCheckOK with default headers values
func NewGetHealthCheckOK() *GetHealthCheckOK {
	return &GetHealthCheckOK{}
}

/*
GetHealthCheckOK describes a response with status code 200, with default header values.

All services are available
*/
type GetHealthCheckOK struct {
	Payload *GetHealthCheckOKBody
}

// IsSuccess returns true when this get health check o k response has a 2xx status code
func (o *GetHealthCheckOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get health check o k response has a 3xx status code
func (o *GetHealthCheckOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get health check o k response has a 4xx status code
func (o *GetHealthCheckOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get health check o k response has a 5xx status code
func (o *GetHealthCheckOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get health check o k response a status code equal to that given
func (o *GetHealthCheckOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetHealthCheckOK) Error() string {
	return fmt.Sprintf("[GET /health/check][%d] getHealthCheckOK  %+v", 200, o.Payload)
}

func (o *GetHealthCheckOK) String() string {
	return fmt.Sprintf("[GET /health/check][%d] getHealthCheckOK  %+v", 200, o.Payload)
}

func (o *GetHealthCheckOK) GetPayload() *GetHealthCheckOKBody {
	return o.Payload
}

func (o *GetHealthCheckOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetHealthCheckOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetHealthCheckInternalServerError creates a GetHealthCheckInternalServerError with default headers values
func NewGetHealthCheckInternalServerError() *GetHealthCheckInternalServerError {
	return &GetHealthCheckInternalServerError{}
}

/*
GetHealthCheckInternalServerError describes a response with status code 500, with default header values.

Part of services are unavailable
*/
type GetHealthCheckInternalServerError struct {
	Payload *GetHealthCheckInternalServerErrorBody
}

// IsSuccess returns true when this get health check internal server error response has a 2xx status code
func (o *GetHealthCheckInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get health check internal server error response has a 3xx status code
func (o *GetHealthCheckInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get health check internal server error response has a 4xx status code
func (o *GetHealthCheckInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get health check internal server error response has a 5xx status code
func (o *GetHealthCheckInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get health check internal server error response a status code equal to that given
func (o *GetHealthCheckInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetHealthCheckInternalServerError) Error() string {
	return fmt.Sprintf("[GET /health/check][%d] getHealthCheckInternalServerError  %+v", 500, o.Payload)
}

func (o *GetHealthCheckInternalServerError) String() string {
	return fmt.Sprintf("[GET /health/check][%d] getHealthCheckInternalServerError  %+v", 500, o.Payload)
}

func (o *GetHealthCheckInternalServerError) GetPayload() *GetHealthCheckInternalServerErrorBody {
	return o.Payload
}

func (o *GetHealthCheckInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetHealthCheckInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetHealthCheckInternalServerErrorBody get health check internal server error body
swagger:model GetHealthCheckInternalServerErrorBody
*/
type GetHealthCheckInternalServerErrorBody struct {

	// resources
	Resources []*models.HealthCheckResource `json:"resources"`
}

// Validate validates this get health check internal server error body
func (o *GetHealthCheckInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetHealthCheckInternalServerErrorBody) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(o.Resources) { // not required
		return nil
	}

	for i := 0; i < len(o.Resources); i++ {
		if swag.IsZero(o.Resources[i]) { // not required
			continue
		}

		if o.Resources[i] != nil {
			if err := o.Resources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getHealthCheckInternalServerError" + "." + "resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getHealthCheckInternalServerError" + "." + "resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get health check internal server error body based on the context it is used
func (o *GetHealthCheckInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetHealthCheckInternalServerErrorBody) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Resources); i++ {

		if o.Resources[i] != nil {
			if err := o.Resources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getHealthCheckInternalServerError" + "." + "resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getHealthCheckInternalServerError" + "." + "resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetHealthCheckInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetHealthCheckInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res GetHealthCheckInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetHealthCheckOKBody get health check o k body
swagger:model GetHealthCheckOKBody
*/
type GetHealthCheckOKBody struct {

	// resources
	Resources []*models.HealthCheckResource `json:"resources"`
}

// Validate validates this get health check o k body
func (o *GetHealthCheckOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetHealthCheckOKBody) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(o.Resources) { // not required
		return nil
	}

	for i := 0; i < len(o.Resources); i++ {
		if swag.IsZero(o.Resources[i]) { // not required
			continue
		}

		if o.Resources[i] != nil {
			if err := o.Resources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getHealthCheckOK" + "." + "resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getHealthCheckOK" + "." + "resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get health check o k body based on the context it is used
func (o *GetHealthCheckOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetHealthCheckOKBody) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Resources); i++ {

		if o.Resources[i] != nil {
			if err := o.Resources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getHealthCheckOK" + "." + "resources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getHealthCheckOK" + "." + "resources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetHealthCheckOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetHealthCheckOKBody) UnmarshalBinary(b []byte) error {
	var res GetHealthCheckOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
