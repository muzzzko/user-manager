// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "User manager",
    "version": "1.0.0"
  },
  "paths": {
    "/health/check": {
      "get": {
        "tags": [
          "healthcheck"
        ],
        "responses": {
          "200": {
            "description": "All services are available",
            "schema": {
              "type": "object",
              "properties": {
                "resources": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/HealthCheckResource"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Part of services are unavailable",
            "schema": {
              "type": "object",
              "properties": {
                "resources": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/HealthCheckResource"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "operationId": "getUsersByFilters",
        "parameters": [
          {
            "description": "Filters for user searching",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "filters"
              ],
              "properties": {
                "filters": {
                  "$ref": "#/definitions/Filters"
                },
                "limit": {
                  "description": "User count in response",
                  "type": "integer",
                  "default": 10,
                  "maximum": 20,
                  "minimum": 1
                },
                "next": {
                  "description": "Value is used for getting next user list. It is returned in response",
                  "type": "string",
                  "x-nullable": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users are filtered by criteria",
            "schema": {
              "$ref": "#/definitions/GetUserByFiltersResponse"
            }
          },
          "422": {
            "description": "Server couldn't handle request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error. Something went wrong",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "User information for updating",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdatingUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User was created successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "422": {
            "description": "Server couldn't handle request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error. Something went wrong",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "operationId": "createUser",
        "parameters": [
          {
            "description": "User information for creating",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreatingUser"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User was created successfully",
            "schema": {
              "$ref": "#/definitions/CreateUserResponse"
            }
          },
          "422": {
            "description": "Server couldn't handle request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error. Something went wrong",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{userID}": {
      "delete": {
        "tags": [
          "user"
        ],
        "operationId": "deleteUser",
        "parameters": [
          {
            "$ref": "#/parameters/UserID"
          }
        ],
        "responses": {
          "204": {
            "description": "User was created successfully"
          },
          "500": {
            "description": "Internal server error. Something went wrong",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CreateUserResponse": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "User identifier which was generated by service",
          "type": "string",
          "format": "uuid",
          "x-nullable": false
        }
      }
    },
    "CreatingUser": {
      "allOf": [
        {
          "$ref": "#/definitions/UserInfo"
        },
        {
          "type": "object",
          "required": [
            "password"
          ],
          "properties": {
            "password": {
              "description": "User password. It must contains capital, small letters and digit",
              "type": "string",
              "maxLength": 256,
              "minLength": 8,
              "x-nullable": false,
              "example": "gD1wScAs"
            }
          }
        }
      ]
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code makes errors distinguish for client",
          "type": "string",
          "example": "1-1"
        },
        "message": {
          "description": "Short message description",
          "type": "string",
          "example": "object not found"
        }
      }
    },
    "Filters": {
      "type": "object",
      "properties": {
        "country_code": {
          "description": "User country code",
          "type": "string",
          "maxLength": 2,
          "minLength": 2,
          "x-nullable": true,
          "example": "UK"
        }
      },
      "x-nullable": false
    },
    "GetUserByFiltersResponse": {
      "type": "object",
      "properties": {
        "next": {
          "description": "Value is used for getting next user list",
          "type": "string"
        },
        "users": {
          "description": "User list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      }
    },
    "HealthCheckResource": {
      "type": "object",
      "required": [
        "resource",
        "is_available"
      ],
      "properties": {
        "is_available": {
          "description": "Show resource availability",
          "type": "boolean"
        },
        "resource": {
          "description": "Checked resource",
          "type": "string"
        }
      }
    },
    "UpdatingUser": {
      "allOf": [
        {
          "$ref": "#/definitions/UserInfo"
        },
        {
          "type": "object",
          "required": [
            "id",
            "password"
          ],
          "properties": {
            "id": {
              "description": "User identifier which was generated by service",
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "password": {
              "description": "User password. It must contains capital, small letters and digit",
              "type": "string",
              "maxLength": 256,
              "minLength": 8,
              "x-nullable": false,
              "example": "gD1wScAs"
            }
          }
        }
      ]
    },
    "User": {
      "allOf": [
        {
          "$ref": "#/definitions/UserInfo"
        },
        {
          "type": "object",
          "required": [
            "id",
            "password"
          ],
          "properties": {
            "id": {
              "description": "User identifier which was generated by service",
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            }
          }
        }
      ]
    },
    "UserInfo": {
      "type": "object",
      "required": [
        "first_name",
        "last_name",
        "nickname",
        "email",
        "country_code"
      ],
      "properties": {
        "country_code": {
          "description": "User country code",
          "type": "string",
          "maxLength": 2,
          "minLength": 2,
          "x-nullable": false,
          "example": "UK"
        },
        "email": {
          "description": "User email",
          "type": "string",
          "maxLength": 256,
          "pattern": "(?:[a-z0-9!#$%\u0026'*+\\=?^_` + "`" + `{|}~-]+(?:\\.[a-z0-9!#$%\u0026'*+\\=?^_` + "`" + `{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])",
          "x-nullable": false,
          "example": "johnsmith@gmail.com"
        },
        "first_name": {
          "description": "User first name",
          "type": "string",
          "maxLength": 256,
          "minLength": 1,
          "x-nullable": false,
          "example": "Egor"
        },
        "last_name": {
          "description": "User last name",
          "type": "string",
          "maxLength": 256,
          "minLength": 1,
          "x-nullable": false,
          "example": "Shestakov"
        },
        "nickname": {
          "description": "User nickname",
          "type": "string",
          "maxLength": 32,
          "minLength": 2,
          "x-nullable": false,
          "example": "muzzzko"
        }
      }
    }
  },
  "parameters": {
    "UserID": {
      "type": "string",
      "format": "uuid",
      "description": "User identifier which was generated by service",
      "name": "userID",
      "in": "path",
      "required": true
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "User manager",
    "version": "1.0.0"
  },
  "paths": {
    "/health/check": {
      "get": {
        "tags": [
          "healthcheck"
        ],
        "responses": {
          "200": {
            "description": "All services are available",
            "schema": {
              "type": "object",
              "properties": {
                "resources": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/HealthCheckResource"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Part of services are unavailable",
            "schema": {
              "type": "object",
              "properties": {
                "resources": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/HealthCheckResource"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "user"
        ],
        "operationId": "getUsersByFilters",
        "parameters": [
          {
            "description": "Filters for user searching",
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "filters"
              ],
              "properties": {
                "filters": {
                  "$ref": "#/definitions/Filters"
                },
                "limit": {
                  "description": "User count in response",
                  "type": "integer",
                  "default": 10,
                  "maximum": 20,
                  "minimum": 1
                },
                "next": {
                  "description": "Value is used for getting next user list. It is returned in response",
                  "type": "string",
                  "x-nullable": true
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users are filtered by criteria",
            "schema": {
              "$ref": "#/definitions/GetUserByFiltersResponse"
            }
          },
          "422": {
            "description": "Server couldn't handle request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error. Something went wrong",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "operationId": "updateUser",
        "parameters": [
          {
            "description": "User information for updating",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UpdatingUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User was created successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "422": {
            "description": "Server couldn't handle request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error. Something went wrong",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "operationId": "createUser",
        "parameters": [
          {
            "description": "User information for creating",
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/CreatingUser"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User was created successfully",
            "schema": {
              "$ref": "#/definitions/CreateUserResponse"
            }
          },
          "422": {
            "description": "Server couldn't handle request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal server error. Something went wrong",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/users/{userID}": {
      "delete": {
        "tags": [
          "user"
        ],
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "User identifier which was generated by service",
            "name": "userID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "User was created successfully"
          },
          "500": {
            "description": "Internal server error. Something went wrong",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CreateUserResponse": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "description": "User identifier which was generated by service",
          "type": "string",
          "format": "uuid",
          "x-nullable": false
        }
      }
    },
    "CreatingUser": {
      "allOf": [
        {
          "$ref": "#/definitions/UserInfo"
        },
        {
          "type": "object",
          "required": [
            "password"
          ],
          "properties": {
            "password": {
              "description": "User password. It must contains capital, small letters and digit",
              "type": "string",
              "maxLength": 256,
              "minLength": 8,
              "x-nullable": false,
              "example": "gD1wScAs"
            }
          }
        }
      ]
    },
    "Error": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Error code makes errors distinguish for client",
          "type": "string",
          "example": "1-1"
        },
        "message": {
          "description": "Short message description",
          "type": "string",
          "example": "object not found"
        }
      }
    },
    "Filters": {
      "type": "object",
      "properties": {
        "country_code": {
          "description": "User country code",
          "type": "string",
          "maxLength": 2,
          "minLength": 2,
          "x-nullable": true,
          "example": "UK"
        }
      },
      "x-nullable": false
    },
    "GetUserByFiltersResponse": {
      "type": "object",
      "properties": {
        "next": {
          "description": "Value is used for getting next user list",
          "type": "string"
        },
        "users": {
          "description": "User list",
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      }
    },
    "HealthCheckResource": {
      "type": "object",
      "required": [
        "resource",
        "is_available"
      ],
      "properties": {
        "is_available": {
          "description": "Show resource availability",
          "type": "boolean"
        },
        "resource": {
          "description": "Checked resource",
          "type": "string"
        }
      }
    },
    "UpdatingUser": {
      "allOf": [
        {
          "$ref": "#/definitions/UserInfo"
        },
        {
          "type": "object",
          "required": [
            "id",
            "password"
          ],
          "properties": {
            "id": {
              "description": "User identifier which was generated by service",
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            },
            "password": {
              "description": "User password. It must contains capital, small letters and digit",
              "type": "string",
              "maxLength": 256,
              "minLength": 8,
              "x-nullable": false,
              "example": "gD1wScAs"
            }
          }
        }
      ]
    },
    "User": {
      "allOf": [
        {
          "$ref": "#/definitions/UserInfo"
        },
        {
          "type": "object",
          "required": [
            "id",
            "password"
          ],
          "properties": {
            "id": {
              "description": "User identifier which was generated by service",
              "type": "string",
              "format": "uuid",
              "x-nullable": false
            }
          }
        }
      ]
    },
    "UserInfo": {
      "type": "object",
      "required": [
        "first_name",
        "last_name",
        "nickname",
        "email",
        "country_code"
      ],
      "properties": {
        "country_code": {
          "description": "User country code",
          "type": "string",
          "maxLength": 2,
          "minLength": 2,
          "x-nullable": false,
          "example": "UK"
        },
        "email": {
          "description": "User email",
          "type": "string",
          "maxLength": 256,
          "pattern": "(?:[a-z0-9!#$%\u0026'*+\\=?^_` + "`" + `{|}~-]+(?:\\.[a-z0-9!#$%\u0026'*+\\=?^_` + "`" + `{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])",
          "x-nullable": false,
          "example": "johnsmith@gmail.com"
        },
        "first_name": {
          "description": "User first name",
          "type": "string",
          "maxLength": 256,
          "minLength": 1,
          "x-nullable": false,
          "example": "Egor"
        },
        "last_name": {
          "description": "User last name",
          "type": "string",
          "maxLength": 256,
          "minLength": 1,
          "x-nullable": false,
          "example": "Shestakov"
        },
        "nickname": {
          "description": "User nickname",
          "type": "string",
          "maxLength": 32,
          "minLength": 2,
          "x-nullable": false,
          "example": "muzzzko"
        }
      }
    }
  },
  "parameters": {
    "UserID": {
      "type": "string",
      "format": "uuid",
      "description": "User identifier which was generated by service",
      "name": "userID",
      "in": "path",
      "required": true
    }
  }
}`))
}
